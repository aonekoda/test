# Convolutional Neural Networks

## Project: 개 품종 분류기를 만들자 

---

이 노트북에서는 project를 수행하기 위한 template code를 제공한다. 아래의 요구 사항을 읽고 project를 완성하기 위한 code를 완성하면 된다.   
**'(IMPLEMENTATION)'** 으로 시작하는 코드 블럭 부분은 반드시 채워 넣어야 제대로 수행된다. 각 section 별로 설명이 제공된다. 설명을 잘 읽고 요구사항에 맞추어 'TODO'부분을 직접 작성하면 된다.

**'Question'** 부분의 질문에 대한 답을 **'Answer:'** 부분에 작성하면 된다.



---
### Project의 목표 

이 project에서는 샘플 이미지에 있는 개를 인식하고 해당 품종을 분류하는 프로그램을 완성한다. project의 마지막 부분에서는 임의의 사진 이미지를 입력으로 받고 해당 이미지에 개가 있는지 detect하여 개가 있으면 개의 품종을 예측하여 출력하는 간단한 프로그램을 작성할 것이다.

![Sample Dog Output](images/sample_dog_output.png)

개의 품종을 분류하기 위해서 CNN을 사용한다. 

### Project 수행단계

이 project를 수행하기 위한 세부 단계는 다음과 같다. 

* **Step 0**: Datasets을 load하고 전처리 한다.
* **Step 1**: 사진 이미지에 개가 있는지 detect한다.
* **Step 2**: CNN을 사용하여 개의 품종을 분류하는 모형을 밑바닥부터 생성한다.(from Scratch)
* **Step 3**: transfer learning을 사용하여 개의 품종을 분류한다.(using Transfer Learning)
* **Step 5**: 임의의 사진 이미지를 입력으로 받아 개의 품종을 예측하여 출력하는 프로그램을 작성한다.


---

## Step 0: Datasets을 load하고 전처리 한다.

dog dataset을 다운로드 하여 현재 디렉토리에 `/dog_images` 압축해제한다.



---
## Step 1: Detect Dogs

Step 1에서는 [pre-trained model](http://pytorch.org/docs/master/torchvision/models.html)을 사용하여 사진 이미지에서 개가 있는지 여부를 dectec하고자 한다.

### Obtain Pre-trained VGG-16 Model

다음과 같이 VGG-16 model을 다운로드 한다. VGG-16은 ImageNet으로 훈련된 모형으로 1000개의 class로 이미지를 분류한다.[1000 categories](https://gist.github.com/yrevar/942d3a0ac09ec9e5eb3a).  


### (IMPLEMENTATION) Making Predictions with a Pre-trained Model

다음의 code cell에서 이미지를 입력으로 받아 해당 이미지의 class를 예측하는 함수를 만드시오.

예를들면, `'dogImages/train/001.Affenpinscher/Affenpinscher_00001.jpg'`를 입력으로 받아서 pre-trained model을 통해 예측한 ImageNet class 값을 리턴 하면 된다. 



### (IMPLEMENTATION) Write a Dog Detector

다음 링크--> [dictionary](https://gist.github.com/yrevar/942d3a0ac09ec9e5eb3a)를 참조해 보면 ImageNet의 1000개 class 중 151-268번에 해당하는 것이 개와 관련된 class임을 알 수 있다. 예를 들면 `'Chihuahua'`에서 `'Mexican hairless'`까지 이다. 따라서 pre-trained VGG-16 model이 예측하는 것이 151에서 268 사이의 index값을 리턴한다면 해당 이미지에서 개가 있다고 할 수 있다.

이를 이용하여 `dog_detector` function을 작성한다.   
precition index가 151~268 사이이면 개가 이미지에 있다고 판단하여 `True`를 리턴하고 그렇지 않으면  `False`를 리턴하도록 한다.


---

## Step 2: Create a CNN to Classify Dog Breeds (from Scratch)

앞의 dog_detector fuction을 사용하여 개가 이미지에 있는지를 detect해 보았다. 

이번 section에서는 이미지에서 개의 품종을 예측하는 분류 모형을 생성해보자. 

Transfer Learning을 이용하지 않고 밑바닥부터 CNN 모형을 생성하도록 한다. 해당 모형의 test accuracy가 최소한 10%는 넘도록 모형을 훈련하여야 한다.   

생성되는 모형의 구조, 하이퍼파라미터, 옵티마이저, 손실함수 등은 자유롭게 설정하도록 한다.

### (IMPLEMENTATION) Specify Data Loaders for the Dog Dataset

디렉토리에 저장되어 있는 개 이미지를 ImageFolder로 읽어 들인다. 해당 디렉토리는 각각  `dog_images/train`, `dog_images/valid`, `dog_images/test`로 나뉘어 있는데 이를 각각 train, valid, test dataloader로 생성한다. [custom datasets](http://pytorch.org/docs/stable/torchvision/datasets.html)을 참조할 수 있다. image augmentation을 수행하려면 [transforms](http://pytorch.org/docs/stable/torchvision/transforms.html?highlight=transform)을 참조한다.

**Question :** 이미지 데이터 전처리에 대하여 다음 질문에 답해보시오. 
- 어떤 방법으로 이미지 사이즈를 조정하였나? input tensor 사이즈를 얼마로 조정하였는가? 왜 그렇게 하였는가?
- Data augmentation을 수행하였는가? 어떤 방법으로 augmentation하였는가? (translations, flips, rotations, etc)? augmentation을 했거나 하니 않았거나, 그렇게 한 이유는 무엇인가? 

**Answer**: 

**이곳을 더블클릭하여 여러분의 답변을 적으시오.**


### (IMPLEMENTATION) Model Architecture

개 품종을 분류하는 CNN 모형을 작성하시오. 아래의 template code를 적절히 활용하시오.

__Question :__ 다음 질문에 답해 보시오.

* Kernel 사이즈는 얼마로 하였는가? stride, padding은 어떻게 정하였는가?
* 몇 개의 Convnet을 어떻게 구성하였는가?
* dropout을 사용하였는가?

__Answer:__ 

**이곳을 더블클릭하여 여러분의 답변을 적으시오.**


### (IMPLEMENTATION) Test the Model

위에서 작성한 모형에 대해 test를 진행하시오. test loss와 test accuracy를 출력하시오. test accuracy는 10% 이상이 되어야 한다.

---

## Step 3: Create a CNN to Classify Dog Breeds (using Transfer Learning)

transfer learning 을 사용하여 개의 품종을 예측하는 모형을 생성하시오. 생성된 모형의 test accuracy는 최소한 60% 이상을 달성하도록 하시오.

## 앞서 작성한 데이터 로더를 그대로 사용할 수 있다.

### (IMPLEMENTATION) Model Architecture

transfer learning을 사용하여 개의 품종을 예측 분류하는 모형을 생성하시오. 

__Question :__  다음 질문에 답하시오.
* pretrained model로 어떤 모형을 사용하였는가? 이유는 무엇인가?
* parameter를 freeze하였는가?
* 마지막 FC layer를 어떻게 수정하여 classifier를 생성하였는가?

__Answer:__ 

>이곳을 더블클릭하여 답변을 작성하시오.


### (IMPLEMENTATION) Specify Loss Function and Optimizer

[loss function](http://pytorch.org/docs/master/nn.html#loss-functions) 와 [optimizer](http://pytorch.org/docs/master/optim.html)을 설정하시오.

### (IMPLEMENTATION) Train and Validate the Model

모형을 훈련하고 validation결과를 확인하시오. 생성된 최종 모형은 `'model_transfer.pt'` 로 저장하시오.

### (IMPLEMENTATION) Test the Model

생성된 모형을 test하시오. 테스트 결과는 test accuracy가 60% 이상이 되어야 한다.

### (IMPLEMENTATION) Predict Dog Breed with the Model

개의 품종을 예측하는 다음의 함수를 완성하시오.  

입력으로 사진이미지 파일을 받아서 개의 품종을 출력하시오. (예를 들면, `Affenpinscher`, `Afghan hound`, 등등)

---

## Step 5: Write your Algorithm

다음과 같은 함수를 작성하시오.  

- 이미지에서 개가 detect 되면 개의 품종을 예측하여 출력하시오.
- 이미지에서 개가 detect 되지 않으면 에러 메세지를 출력하도록 하시오.


### (IMPLEMENTATION) Write your Algorithm

## Sample Test

임의의 이미지로 위에서 작성한 함수를 테스트해서 제대로 된 결과가 나오는지 확인하시오.


__Question :__ 최종 결과를 확인하고 다음의 질문에 답하시오.

* 최종 모형을 개선할 수 있는 방법에 대해서 생각해 보시오.
* test accuracy를 높이기 위해서 추가적으로 고려 할 수 있는 방법으로는 어떤게 있을까? 

__Answer:__ 
> 여기에 여러분의 답을 작성해보시오.



