import torch
from torch import nn
import torch.nn.functional as F
from torchvision import datasets, transforms

# Define a transform to normalize the data
transform = transforms.ToTensor()

# Download and load the training data
trainset = datasets.MNIST('../data', download=True, train=True, transform=transform)
trainloader = torch.utils.data.DataLoader(trainset, batch_size=10, shuffle=True)


dataiter = iter(trainloader)
images, labels = dataiter.next()
plt.imshow(images[0].numpy().squeeze(), cmap='gray')


import torch.nn as nn
import torch.nn.functional as F
import torch

model = nn.Sequential(nn.Conv2d(1,1,3))
print(model)

f1 = model(images[0].unsqueeze(0))

plt.imshow(f1.detach().numpy().squeeze(), cmap='gray');

weight = model.state_dict()['0.weight']
plt.imshow(weight.squeeze(), cmap='gray')

plt.figure(figsize=(10,10))
plt.subplot(1,3,1)
plt.title('original')
plt.imshow(images[0].numpy().squeeze(), cmap='gray');
plt.subplot(1,3,2)
plt.imshow(weight, cmap='gray')
plt.title('weight')
plt.subplot(1,3,3)
plt.imshow(f1.detach().numpy().squeeze(), cmap='gray')
plt.title('featured map')

plt.tight_layout()

maxpool= nn.MaxPool2d(4,4)
plt.imshow(maxpool(f1).detach().squeeze().numpy(), cmap='gray')
